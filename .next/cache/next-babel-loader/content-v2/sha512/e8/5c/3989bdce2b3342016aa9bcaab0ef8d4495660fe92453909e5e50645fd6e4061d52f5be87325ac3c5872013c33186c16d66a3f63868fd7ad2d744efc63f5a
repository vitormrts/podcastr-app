{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/podcastr-app/src/pages/index.tsx\";\n// Formas de conseguir uma API\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\nimport styles from './home.module.scss';\nexport var __N_SSG = true;\nexport default function Home(props) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['homeContainer'],\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.latestEpisodes,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\xDAltimos lan\\xE7amentos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.allEpisodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/podcastr-app/src/pages/index.tsx"],"names":["styles","Home","props","latestEpisodes","allEpisodes"],"mappings":";;AAAA;AAEA;AACA;AACA;AAQA,OAAOA,MAAP,MAAmB,oBAAnB;;AAoBA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAgC;AAC7C;AACA;AACA;AACA;AACA;AACA,sBACE;AAAK,IAAA,SAAS,EAAEF,MAAM,CAAC,eAAD,CAAtB;AAAA,4BACI;AAAS,MAAA,SAAS,EAAEA,MAAM,CAACG,cAA3B;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAS,MAAA,SAAS,EAAEH,MAAM,CAACI;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAkCD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;KA3DwBH,I","sourcesContent":["// Formas de conseguir uma API\n\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\n\nimport { GetStaticProps } from 'next'\nimport { format, parseISO } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport { api } from '../services/api'\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString'\n\nimport styles from './home.module.scss'\n\ntype Episode = {\n  id: string,\n  title:string,\n  thumbnail: string,\n  members: string,\n  publishedAt: string,\n  duration: number,\n  durationAsString: string,\n  description: string,\n  url: string\n}\n\ntype HomeProps = {\n  episodes: Array<Episode>\n}\n\n\n\nexport default function Home(props: HomeProps) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return (\n    <div className={styles['homeContainer']}>\n        <section className={styles.latestEpisodes}>\n          <h2>Últimos lançamentos</h2>\n        </section>\n        <section className={styles.allEpisodes}>\n\n        </section>\n    </div>\n  )\n}\n\nexport const getStaticProps:GetStaticProps = async () => { // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n    const { data } = await api.get('episodes', {\n      params: {\n        _limit: 12,\n        _sort: 'published_at',\n        _order: 'desc'\n      }\n    })\n\n    const episodes = data.map(episode => {\n      return {\n        id: episode.id,\n        title: episode.title,\n        thumbnail: episode.thumbnail,\n        members: episode.members,\n        publishedAt: format(parseISO(episode.published_at), 'd MMM yy', { locale: ptBR }),\n        duration: Number(episode.file.duration),\n        durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n        description: episode.description,\n        url: episode.file.url\n      }\n    })\n\n    return {\n      props: {\n        episodes\n      },\n\n      revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n    }\n}\n\n// export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}