{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/podcastr-app/src/pages/index.tsx\";\n// Formas de conseguir uma API\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\nimport Image from 'next/image';\nimport styles from './home.module.scss';\nexport var __N_SSG = true;\nexport default function Home(_ref) {\n  var _this = this;\n\n  var latestEpisodes = _ref.latestEpisodes,\n      allEpisodes = _ref.allEpisodes;\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['homeContainer'],\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.latestEpisodes,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\xDAltimos lan\\xE7amentos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: latestEpisodes.map(function (episode) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Image, {\n              width: 192,\n              objectFit: \"cover\",\n              height: 192,\n              src: episode.thumbnail,\n              alt: episode.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.episodeDetails,\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"#\",\n                children: episode.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: episode.members\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: episode.publishedAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: episode.durationAsString\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/play-green.svg\",\n                alt: \"Tocar epis\\xF3dio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, _this)]\n          }, episode.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.allEpisodes,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Todos e\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/podcastr-app/src/pages/index.tsx"],"names":["Image","styles","Home","latestEpisodes","allEpisodes","map","episode","thumbnail","title","episodeDetails","members","publishedAt","durationAsString","id"],"mappings":";;AAAA;AAEA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,YAAlB;AAMA,OAAOC,MAAP,MAAmB,oBAAnB;;AAqBA,eAAe,SAASC,IAAT,OAA0D;AAAA;;AAAA,MAA1CC,cAA0C,QAA1CA,cAA0C;AAAA,MAA1BC,WAA0B,QAA1BA,WAA0B;AACvE;AACA;AACA;AACA;AACA;AACA,sBACE;AAAK,IAAA,SAAS,EAAEH,MAAM,CAAC,eAAD,CAAtB;AAAA,4BACI;AAAS,MAAA,SAAS,EAAEA,MAAM,CAACE,cAA3B;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,kBACIA,cAAc,CAACE,GAAf,CAAmB,UAAAC,OAAO,EAAI;AAC9B,8BACE;AAAA,yCACE,QAAC,KAAD;AAAO,cAAA,KAAK,EAAE,GAAd;AAAmB,cAAA,SAAS,EAAC,OAA7B;AAAqC,cAAA,MAAM,EAAE,GAA7C;AAAkD,cAAA,GAAG,EAAEA,OAAO,CAACC,SAA/D;AAA2E,cAAA,GAAG,EAAED,OAAO,CAACE;AAAxF;AAAA;AAAA;AAAA;AAAA,qBADF,eAGE;AAAK,cAAA,SAAS,EAAEP,MAAM,CAACQ,cAAvB;AAAA,sCACE;AAAG,gBAAA,IAAI,EAAC,GAAR;AAAA,0BAAaH,OAAO,CAACE;AAArB;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AAAA,0BAAIF,OAAO,CAACI;AAAZ;AAAA;AAAA;AAAA;AAAA,uBAFF,eAGE;AAAA,0BAAOJ,OAAO,CAACK;AAAf;AAAA;AAAA;AAAA;AAAA,uBAHF,eAIE;AAAA,0BAAOL,OAAO,CAACM;AAAf;AAAA;AAAA;AAAA;AAAA,uBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,eAUE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAA,qCACE;AAAK,gBAAA,GAAG,EAAC,iBAAT;AAA2B,gBAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBAVF;AAAA,aAASN,OAAO,CAACO,EAAjB;AAAA;AAAA;AAAA;AAAA,mBADF;AAgBD,SAjBC;AADJ;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAyBI;AAAS,MAAA,SAAS,EAAEZ,MAAM,CAACG,WAA3B;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,C,CAsCD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;KApFwBF,I","sourcesContent":["// Formas de conseguir uma API\n\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\n\nimport { GetStaticProps } from 'next'\nimport Image from 'next/image'\nimport { format, parseISO } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport { api } from '../services/api'\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString'\n\nimport styles from './home.module.scss'\n\ntype Episode = {\n  id: string,\n  title:string,\n  thumbnail: string,\n  members: string,\n  publishedAt: string,\n  duration: number,\n  durationAsString: string,\n  description: string,\n  url: string\n}\n\ntype HomeProps = {\n  latestEpisodes: Episode[]\n  allEpisodes: Episode[]\n}\n\n\n\nexport default function Home({ latestEpisodes, allEpisodes }: HomeProps) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return (\n    <div className={styles['homeContainer']}>\n        <section className={styles.latestEpisodes}>\n          <h2>Últimos lançamentos</h2>\n\n          <ul>\n            { latestEpisodes.map(episode => {\n              return (\n                <li key={episode.id}> {/* a key evita possiveis renderizacoes desnecessarias */}\n                  <Image width={192} objectFit=\"cover\" height={192} src={episode.thumbnail}  alt={episode.title}/>\n\n                  <div className={styles.episodeDetails}>\n                    <a href=\"#\">{episode.title}</a>\n                    <p>{episode.members}</p>\n                    <span>{episode.publishedAt}</span>\n                    <span>{episode.durationAsString}</span>\n                  </div>\n                  \n                  <button type=\"button\">\n                    <img src=\"/play-green.svg\" alt=\"Tocar episódio\"/>\n                  </button>\n                </li>\n              )\n            }) }\n          </ul>\n        </section>\n        <section className={styles.allEpisodes}>\n            <h2>Todos e</h2>\n        </section>\n    </div>\n  )\n}\n\nexport const getStaticProps:GetStaticProps = async () => { // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n    const { data } = await api.get('episodes', {\n      params: {\n        _limit: 12,\n        _sort: 'published_at',\n        _order: 'desc'\n      }\n    })\n\n    const episodes = data.map(episode => {\n      return {\n        id: episode.id,\n        title: episode.title,\n        thumbnail: episode.thumbnail,\n        members: episode.members,\n        publishedAt: format(parseISO(episode.published_at), 'd MMM yy', { locale: ptBR }),\n        duration: Number(episode.file.duration),\n        durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n        description: episode.description,\n        url: episode.file.url\n      }\n    })\n\n    const latestEpisodes = episodes.slice(0, 2);\n    const allEpisodes = episodes.slice(0, episodes.length)\n\n    return {\n      props: {\n        latestEpisodes,\n        allEpisodes\n      },\n\n      revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n    }\n}\n\n// export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}