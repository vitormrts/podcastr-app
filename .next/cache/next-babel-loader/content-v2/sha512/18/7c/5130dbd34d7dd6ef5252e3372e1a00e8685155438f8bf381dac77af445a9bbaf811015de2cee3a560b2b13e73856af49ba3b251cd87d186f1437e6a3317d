{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/podcastr-app/src/pages/index.tsx\";\n// Formas de conseguir uma API\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\nimport { api } from '../services/api';\nexport default function Home(props) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(props.episodes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n  const {\n    data\n  } = await api.get('episodes?_limit=12&_sort=published_at&_order=desc', {\n    params: {\n      _limit: 12\n    }\n  });\n  return {\n    props: {\n      episodes: data\n    },\n    revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n\n  };\n}; // export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/podcastr-app/src/pages/index.tsx"],"names":["api","Home","props","JSON","stringify","episodes","getStaticProps","data","get","params","_limit","revalidate"],"mappings":";;AAAA;AAEA;AACA;AACA;AAIA,SAASA,GAAT,QAAoB,iBAApB;AAcA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAgC;AAC7C;AACA;AACA;AACA;AACA;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,QAArB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AAED,OAAO,MAAMC,cAA6B,GAAG,YAAY;AAAE;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMP,GAAG,CAACQ,GAAJ,CAAQ,mDAAR,EAA6D;AAClFC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAD0E,GAA7D,CAAvB;AAMA,SAAO;AACLR,IAAAA,KAAK,EAAE;AACLG,MAAAA,QAAQ,EAAEE;AADL,KADF;AAKLI,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,CALjB,CAKmB;;AALnB,GAAP;AAOH,CAdM,C,CAgBP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// Formas de conseguir uma API\n\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\n\nimport { GetStaticProps } from 'next'\n\nimport { api } from '../services/api'\n\ntype Episode = {\n  id: string\n  title: string\n  members: string\n}\n\ntype HomeProps = {\n  episodes: Array<Episode>\n}\n\n\n\nexport default function Home(props: HomeProps) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return (\n    <div>\n      <h1>Index</h1>\n      <p>{JSON.stringify(props.episodes)}</p>\n    </div>\n  )\n}\n\nexport const getStaticProps:GetStaticProps = async () => { // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n    const { data } = await api.get('episodes?_limit=12&_sort=published_at&_order=desc', {\n      params: {\n        _limit: 12\n      }\n    })\n\n    return {\n      props: {\n        episodes: data\n      },\n\n      revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n    }\n}\n\n// export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}