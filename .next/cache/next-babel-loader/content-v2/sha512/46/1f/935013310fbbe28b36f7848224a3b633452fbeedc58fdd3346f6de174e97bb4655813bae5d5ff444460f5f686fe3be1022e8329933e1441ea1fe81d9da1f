{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/podcastr-app/src/pages/index.tsx\";\n// Formas de conseguir uma API\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { api } from '../services/api';\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString';\nexport default function Home(props) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticProps = async () => {\n  // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      thumbnail: episode.thumbnail,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {\n        locale: ptBR\n      }),\n      duration: Number(episode.file.duration),\n      durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n      description: episode.description,\n      url: episode.file.url\n    };\n  });\n  return {\n    props: {\n      episodes\n    },\n    revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n\n  };\n}; // export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/podcastr-app/src/pages/index.tsx"],"names":["format","parseISO","ptBR","api","convertDurationToTimeString","Home","props","getStaticProps","data","get","params","_limit","_sort","_order","episodes","map","episode","id","title","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","durationAsString","description","url","revalidate"],"mappings":";;AAAA;AAEA;AACA;AACA;AAGA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,2BAAT,QAA4C,sCAA5C;AAsBA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAgC;AAC7C;AACA;AACA;AACA;AACA;AACA,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED,OAAO,MAAMC,cAA6B,GAAG,YAAY;AAAE;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAML,GAAG,CAACM,GAAJ,CAAQ,UAAR,EAAoB;AACzCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,cAFD;AAGNC,MAAAA,MAAM,EAAE;AAHF;AADiC,GAApB,CAAvB;AAQA,QAAMC,QAAQ,GAAGN,IAAI,CAACO,GAAL,CAASC,OAAO,IAAI;AACnC,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELC,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAFV;AAGLC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SAHd;AAILC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OAJZ;AAKLC,MAAAA,WAAW,EAAErB,MAAM,CAACC,QAAQ,CAACe,OAAO,CAACM,YAAT,CAAT,EAAiC,UAAjC,EAA6C;AAAEC,QAAAA,MAAM,EAAErB;AAAV,OAA7C,CALd;AAMLsB,MAAAA,QAAQ,EAAEC,MAAM,CAACT,OAAO,CAACU,IAAR,CAAaF,QAAd,CANX;AAOLG,MAAAA,gBAAgB,EAAEvB,2BAA2B,CAACqB,MAAM,CAACT,OAAO,CAACU,IAAR,CAAaF,QAAd,CAAP,CAPxC;AAQLI,MAAAA,WAAW,EAAEZ,OAAO,CAACY,WARhB;AASLC,MAAAA,GAAG,EAAEb,OAAO,CAACU,IAAR,CAAaG;AATb,KAAP;AAWD,GAZgB,CAAjB;AAcA,SAAO;AACLvB,IAAAA,KAAK,EAAE;AACLQ,MAAAA;AADK,KADF;AAKLgB,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,CALjB,CAKmB;;AALnB,GAAP;AAOH,CA9BM,C,CAgCP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// Formas de conseguir uma API\n\n// SPA => useEffect() -> nao carrega se desabilitar o JS\n// SSR => getServerSideProps() -> carrega a API antes de abrir a pagina\n// SSG => gera uma versao estatica, isto eh, a mesma pagina eh disponibilizada num determinado tempo (nao precisa fazer novas requisicoes, deixa a pagina mais performatica)\n\nimport { GetStaticProps } from 'next'\nimport { format, parseISO } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport { api } from '../services/api'\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString'\n\nimport styles from './home.module.scss'\n\ntype Episode = {\n  id: string,\n  title:string,\n  thumbnail: string,\n  members: string,\n  publishedAt: string,\n  duration: number,\n  durationAsString: string,\n  description: string,\n  url: string\n}\n\ntype HomeProps = {\n  episodes: Array<Episode>\n}\n\n\n\nexport default function Home(props: HomeProps) {\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //     .then(response => response.json())\n  //       .then(data => console.log(data))\n  // }, [])\n  return (\n    <div>\n\n    </div>\n  )\n}\n\nexport const getStaticProps:GetStaticProps = async () => { // a mesma pagina eh disponibilizada para o usuario num trecho de tempo (sem atts constantes)\n    const { data } = await api.get('episodes', {\n      params: {\n        _limit: 12,\n        _sort: 'published_at',\n        _order: 'desc'\n      }\n    })\n\n    const episodes = data.map(episode => {\n      return {\n        id: episode.id,\n        title: episode.title,\n        thumbnail: episode.thumbnail,\n        members: episode.members,\n        publishedAt: format(parseISO(episode.published_at), 'd MMM yy', { locale: ptBR }),\n        duration: Number(episode.file.duration),\n        durationAsString: convertDurationToTimeString(Number(episode.file.duration)),\n        description: episode.description,\n        url: episode.file.url\n      }\n    })\n\n    return {\n      props: {\n        episodes\n      },\n\n      revalidate: 60 * 60 * 8 // a cada 8hrs eh gerada uma nova pagina\n    }\n}\n\n// export async function getServerSideProps() { // carrega a API antes mesmo de abrir a pagina (executa toda vez que alguem acessa a home do app)\n//     const response = await fetch('http://localhost:3333/episodes')\n//     const data = await response.json()\n\n//     return {\n//       props: {\n//         episodes: data\n//       }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}